Documentation for API REST endpoints
====================================

Base path: localhost:8080/api


ENTITY Trip
-----------

1) GET /trips - return JSON array of all trips where:
             ?minPrice=N ... price is >= N
             &maxPrice=M ... price is <= M
             &minLength=N ... length is >= N
             &maxLength=M ... length is <= M
             &startAfter=DATE ... startDate is >= DATE
             &startBefore=DATE ... startDate is <= DATE
             &endAfter=DATE ... endDate is >= DATE
             &endBefore=DATE ... endDate id <= DATE
                                 DATE is YYYY-MM-DD, assumed with 00:00:00.000 time
             &inName=SUBSTR ... name contains SUBSTR
             &country=COUNTRY[,COUNTRY[...]] ... countries contain at least one of COUNTRies
             &tag=TAG[,TAG[...]] ... tags contain at least on of TAGs
             &sortBy=ATTR ... sort returned array by attribute ATTR:
                              id, name, start, length, price (default: id)
             &order=DIRECTION ... sort in direction:
                                  ascending, descending (default: ascending)
             &from=N ... omit first N results from returned list
             &limit=M ... include only max M results in returned list
       (all parameters are optional and applied in conjunction)

2) GET /trips/sort/ - OBSOLETE, please use just /trips?sortBy=ATTR&order=DIRECTION

3) GET /trips/{id} - return Trip with trip.getId() = {id}

4) GET /trips/name/{name} - return Trip with trip.getName() = {name}

5) GET /trips/users/{id} - return all users of Trip where trip.getId() = {id}

6) POST /trips - request body must be JSON entity Trip without ID attribute.
       If there is no Trip with the same NAME in DB, store Trip into DB
	       and return 201 CREATED with JSON entity Trip including assigned ID,
       otherwise,
	       return 409 CONFLICT with JSON entity Trip with conflicting NAME.

7) POST /trips/tags/{tripid} - add one Tag for Trip where tripId = trip.getId(),
       if Tag exists then add it to Trip, else create new Tag and add it to Trip.

8) POST /trips/country/{tripid} - add one Country for Trip where tripId = trip.getId(),
       if Country exists then add it to Trip, else create new Country and add it to Trip.

9) DELETE /trips/{id} - delete Trip where id = trip.getId(), return 204 NO_CONTENT.

10) DELETE /trips/tags/{tripId}/{tagId} - remove one Tag from Trip
       where tripId = trip.getId() and tagId = tag.getId(),
       Tag remains in DB.

11) DELETE /country/{tripId}/{countryId} - remove one Country from Trip
       where tripId = trip.getId() and countryId = country.getId(),
       Country remains in DB.


Bulk operations (mostly for debugging):

12) GET /trips/bulk - return JSON array of all Trips, unsorted

13) POST /trips/bulk - add all Trips from JSON array as with POST /trips

14) PUT /trips/bulk - replace all Trips in DB with Trips from JSON array
       like DELETE /trips/bulk and POST /trips/bulk

15) PATCH /trips/bulk - add or replace all Trips from JSON array,
       Trips with same NAME are replaced, new NAMEs are added.

16) DELETE /trips/bulk - delete all Trips from DB


ENTITY Tag
----------

1) GET /tags - retrurn all tags

2) POST /tags - add one Tag to db

3) DELETE /tags/{tagId} - delete one tag where tagId = tag.getId()

4) GET /tags/getByName/{name} - return one Tag where name = tag.getName()

5) GET /tags/{tagId} - return one Tag where tagId = tag.getId()

6) POST /tags/addAll - add all Tags from JSON array


ENTITY Country
--------------

1) GET /countries - get all Countries

2) GET /countries/{name} - return Country where name = Country.getName()

3) GET /countries/tripGet/{countryId} - return all Trips from Country
       where countryId = Country.getId()

4) POST /countries/addAll - add all Countries from JSON array

5) POST /countries - add one Country to DB

6) POST /countries/trip/{countryId} - add Trip to Country where countryId = Country.getId()

7) DELETE /countries/{id} - delete Country where id = Country.getId()

8) DELETE /countries/trip/{countryId}/{tripId} - delete Trip from Country
       where countryId = Country.getId() and tripId = Trip.getId(),
       Trip remains in DB.


ENTITY User
-----------

1) GET /user - get all users

2) GET /user/{userID} - get user where userId = user.getId

3) GET /user/username/{username} - get user where username = user.getUsername

4) POST /user/add - add new User to DB, attribute Role is Enum = ROLE_ADMIN, ROLE_USER

5) DELET /user/remove/{userId} - delete user from DB where userId = user.getId


ENTITY Recommendation
---------------------

1) GET /recommendations/undelivered - return array of all Recommendations
       not yet marked as delivered

2) DELETE /recommendations/{id}/undelivered - mark recommendation as delivered,
          return 204 NO_CONTENT


For debugging purposes:

3) GET /recommendations - return array of all Recommendations

4) GET /recommendations/{id} - return Recommendation with getId() = {id}

5) POST /recommendations - add new Recommendation, request body must be JSON entity
        Recommendation without id

6) DELETE /recommendation/{id} - remove Recommendation with getId() = {id},
          return 204 NO_CONTENT

7) DELETE /recommendations - remove all Recommendations, return 204 NO_CONTENT


ENTITY TripCriteria
-------------------

1) GET /criterias - return array of all TripCriterias

2) GET /criterias/{id} - return TripCriteria with getId() = {id}

3) GET /criterias/{id}/trips - return array of Trips fitting TripCriteria with getId() = {id}

4) POST /criterias - add new TripCriteria, request body must be JSON entity TripCriteria without {id}

5) DELETE /criterias/{id} - remove TripCriteria with getId() = {id}, return 204 NO_CONTENT

6) DELETE /criterias - remove all TripCriteria entities
